1.  #include <iostream>
using namespace std;
int main() 
{    
         int x, y = 1;
         x = 10;                                                   output: 2
         if (x != 10 && x / 0 == 0)
            cout << y;
         else
             cout << ++y;
} 
Solution Description
Even though you get the output as '2', you'll also get a "division by zero" warning. 
The reason you only get a warning but not an error is short-circuit evaluation. 
In the if statement, once the first condition (x != 10) is evaluated to be false, 
then the second condition (x / 0 == 0) is not even executed because the result of the overall condition (x != 10 && x / 0 == 0) will be false.
Even if the second condition were true, it would not change the overall result of the two conditions.
However, if the value of x or the first condition itself is changed so that it evaluates to true, 
then you will get an error because in that case the second condition would also be checked (or executed).

2.  #include <iostream>
using namespace std;
int main()
{   
    int x = 15;                                                  output: 15 17
    int y = x++;
    int z = ++x;
    cout << y << “ “ << z;
}

3.  #include <iostream>
using namespace std;
int main() 
{                                                               output: 32
         int g = 3;
         cout << (++g * 8);
} 

4.  #include <iostream>
using namespace std;
int main()
{
    int x = 10;
    int y = 20;
    if(x++ > 10 && ++y > 20 ){                                output: Inside else 11 20
    cout << "Inside if ";
    } else{
    cout << "Inside else ";
    }
    cout << x << “ “ << y;
}

5.  #include <iostream>
using namespace std;
int main()
{
    int x = 10;
    int y = 20;                                              output: Inside if 11 21
    if(x++ > 10 || ++y > 20 ){
    cout << "Inside if ";
    } else{
    cout << "Inside else ";
    }
    cout << x << “ “ << y;
}

6.  for(int i = 0; i < 5; i = i + 1){
    cout << i << " ";                                        output: 0 2 4
    i = i + 1;
}

7. for(int i = 1; i < 5; i = i + 1){                         output: infinite 1s
    cout << i << " ";
    i = i - 1;
}

8.  for(int i = 0; i < 2; i = i + 1) {
     for(int j = 0; j < 2; j = j + 1) {
          if (j == 1)                                       output: 0 0
              break;
          cout << j << " ";
      }
 } 
 
 
 9.  for(int i = 0; i < 5; i = i + 1) {
     if(i == 2) 
           continue;                                       output: 0 1 3 4
    cout << i << " ";
 } 
 
 10.  Which of these jump statements can skip processing remainder of code in its body for a particular iteration ?
      Ans. Continue
      Solution Description
      ####"break" is used to exit from the current loop.
      ####"return" statement is used to exit from the current function.
      ####"continue" is used to skip the current iteration of a loop and continue with the next iteration.
      
      
 11.      int i = 1;
while(i < 5) {
    if(i == 3) {                                            output: 1 2
        break;
    }
    cout << i << " ";
    i++;
} 

12. int i = 1;
while(i < 5) {
    if(i == 3) {
        continue;
    }                                                      output: 1 2 infinite loop
    cout << i << " ";
    i++;
}


13. int i = 1;
while(i < 3) {
    int j = 1;
    while(j < 5) {
        if(j == 3) {                                      output: 1 2 1 2
            break;
        }
        cout << j << " ";
        j++;
    }
    i++;
}

14.  int i = 1;
while(i < 3) {
    int j = 0;
    while(j < 5) {                                       output: 1 2 4 5 1 2 4 5
        j++;
        if(j == 3) {
            continue;
        }
        cout << j << " ";
    }
    i++;
}

15.  #include <iostream>
using namespace std;
int main() {                                                 Error: yes
    int a = 10;
    if(a > 5) {
        int b = 10;
    }
    cout << b << endl;
}

16. #include <iostream>
using namespace std;
int main() {
    int a = 10;
    if(a > 5) {                                        Error: no
        int a = 100;
    }
    cout << a << endl;
}

17.  #include <iostream>
using namespace std;
int main() {
    int a = 10;
    if(a > 5) {
        int a = 100;
    }
    else {                                              output: 10
        int a = 110;
    }
    cout << a << endl;
}

18.  #include <iostream>
using namespace std;
int main() {
    for(int i = 0; i < 3; i++) {                       error: yes
        cout << i << " ";
    }
    cout << i << " ";
}

19.  #include <iostream>
using namespace std; 
int main() {
    int a = 10;
    while(a > 5) {
        int a = 1;                              Output: infinite loop
        cout << a << " ";
        a--;
    }
}
